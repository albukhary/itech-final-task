name: Build | Push | Deploy | Destroy

on:
  # push:
  #   branches:
  #     - main
  workflow_dispatch:
    inputs:
      # Select Job you want to perform
      action:
        description: 'Action to Perform'
        type: choice
        required: true
        options:
        - Deploy
        - Destroy
        - Build-Push-Image
        - Deploy-App-to-EKS
env:
  BACKEND_DYNAMO_TABLE_NAME: itech-final-tfstate-lock
  BACKEND_S3_BUCKET_NAME: itech-final-state

jobs:
  ############### If Deploy Option is selected
  create-backend:
    if: ${{ github.event.inputs.action == 'Deploy' }}
    runs-on: ubuntu-latest

    steps:
    - name: Install aws-cli
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-pip
        sudo pip3 install awscli --upgrade
      
    - name: Configure AWS credentials
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
        aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
        aws configure set default.region us-east-1

    - uses: actions/checkout@v2
      
    - name: Check if DynamoDB table exists
      id: check-dynamodb-table
      run: |
        if aws dynamodb describe-table --table-name ${{ env.BACKEND_DYNAMO_TABLE_NAME }} 2>/dev/null; then
          echo "::set-output name=exists::true"
        else
          echo "::set-output name=exists::false"
        fi
      shell: bash
      
    - name: Create DynamoDB table
      run: |
        aws dynamodb create-table \
          --table-name ${{ env.BACKEND_DYNAMO_TABLE_NAME }} \
          --attribute-definitions AttributeName=LockID,AttributeType=S \
          --key-schema AttributeName=LockID,KeyType=HASH \
          --billing-mode PAY_PER_REQUEST
      if: steps.check-dynamodb-table.outputs.exists == 'false'

    - name: Check if S3 bucket exists
      id: check-s3-bucket
      run: |
        if aws s3api head-bucket --bucket ${{ env.BACKEND_S3_BUCKET_NAME }} 2>/dev/null; then
          echo "::set-output name=exists::true"
        else
          echo "::set-output name=exists::false"
        fi
      shell: bash
      
    - name: Create S3 bucket
      run: |
        aws s3api create-bucket --bucket ${{ env.BACKEND_S3_BUCKET_NAME }} --region us-east-1
      if: steps.check-s3-bucket.outputs.exists == 'false'

    - name: Configure S3 bucket public access block
      run: |
        aws s3api put-public-access-block \
          --bucket ${{ env.BACKEND_S3_BUCKET_NAME }} \
          --public-access-block-configuration \
            "BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true"
  
  ################# If you selected to destroy the resources
  destroy-backend:
    if: ${{ github.event.inputs.action == 'Destroy' }}
#   needs: [tf_destroy_vpc]
    runs-on: ubuntu-latest

    steps:
    - name: Install aws-cli
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-pip
        sudo pip3 install awscli --upgrade
      
    - name: Configure AWS credentials
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
        aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
        aws configure set default.region us-east-1

    - uses: actions/checkout@v2
      
    - name: Check if DynamoDB table exists
      id: check-dynamodb-table
      run: |
        if aws dynamodb describe-table --table-name ${{ env.BACKEND_DYNAMO_TABLE_NAME }} 2>/dev/null; then
          echo "::set-output name=exists::true"
        else
          echo "::set-output name=exists::false"
        fi
      shell: bash

    - name: Check if S3 bucket exists
      id: check-s3-bucket
      run: |
        if aws s3api head-bucket --bucket ${{ env.BACKEND_S3_BUCKET_NAME }} 2>/dev/null; then
          echo "::set-output name=exists::true"
        else
          echo "::set-output name=exists::false"
        fi
      shell: bash
      
    - name: Delete S3 bucket public access block
      run: |
        aws s3api delete-public-access-block \
        --bucket ${{ env.BACKEND_S3_BUCKET_NAME }}
      if: steps.check-s3-bucket.outputs.exists == 'true' 

    - name: Delete S3 bucket
      run: |
        aws s3 rm s3://${{ env.BACKEND_S3_BUCKET_NAME }} --recursive
        aws s3 rb s3://${{ env.BACKEND_S3_BUCKET_NAME }} --force  
      if: steps.check-s3-bucket.outputs.exists == 'true'

    - name: Delete DynamoDB table
      run: |
        aws dynamodb delete-table \
          --table-name ${{ env.BACKEND_DYNAMO_TABLE_NAME }} \
      if: steps.check-dynamodb-table.outputs.exists == 'true'
##### Job to build and push app image to docker hub
  build-and-push:
    if: ${{ github.event.inputs.action == 'Build-Push-Image' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v2
        with:
          context: ./application
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/my-app:${{ github.sha }}
####### Here is a job to deploy our application to EKS
  deploy-to-eks:
    if: ${{ github.event.inputs.action == 'Deploy-App-to-EKS' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Authenticate to EKS cluster
        id: authenticate_eks
        run: aws eks update-kubeconfig --name iTechFinalTask-cluster

      - name: Apply Deployment
#        if: steps.plan.authenticate_eks == 'success'
        id: deploy_app
        run: |
          kubectl apply -auto-approve -f k8s/deployment.yaml
      - name: Apply Ingress
#        if: steps.plan.deploy_app == 'success'
        run: |
          kubectl apply -auto-approve -f k8s/ingress.yaml